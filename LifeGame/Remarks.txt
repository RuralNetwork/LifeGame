------------Code layout conventions-------------
- Use properties instead of fields
- Use "lowerCamelCase" for private methods/fields
- Use "UpperCamelCase" for public properties/methods
- Use "UpperCamelCase" for classes, structs & enums
- Use "CAPITAL_UNDERSCORE" for consts

-------------------Notes------------------------
- Use structs instead of class for ease of full copy (just an assignment), but they should be passed as parameter as less as possible
  Remember that when copying a struct, modifying the copy doesn't affect the original
- When downcasting (ex. from Thing to Being) use the "as" operator instead of () prefix operator beacuse it doesn't check if operation succeed
- When testing, consider using <gcAllowVeryLargeObjects> and switching to 64 bit for more space allocation for a single object (the ram could be not enough though)
- The keyword "readonly" doesn't give peformance benefits


Code example:
// To merge bitmaps:
var finalBitmap = new Bitmap(x, y);
var subBitmap1;// this can be a Bitmap or an Image
var graphics = Graphics.FromImage(subBitmap1); //this is System.Drawing.Graphics, you should change our Graphics in sth like Engine
graphics.DrawImage(subBitmap1, new Point(x, y)); //Now finalBitmap has changed. you can use other overloads, for image trasformations